#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import json
import subprocess
from datetime import datetime


MODES = json.loads(os.getenv('MODES'))
OE_API_TOKEN = os.environ['OE_API_TOKEN']
OE_API_PUBLISHER = os.environ['OE_API_PUBLISHER']
OUTDIR = os.environ['OUTDIR']
CACHEDIR = os.environ['CACHEDIR']
REPROCESS_REPORTS = os.environ['REPROCESS_REPORTS'] == 'true'


def outstream(filename):
    return open(filename, "w")


def instream(filename):
    return open(filename, "r")


def get_filename(odir, d):
    return "%s/OpenEdition_%s.csv" % (odir, d)


def generate_dates(date, cutoff_date):
    epoch = datetime.strptime(date, '%Y-%m-%d')
    cutoff = datetime.strptime(cutoff_date, '%Y-%m-%d')

    i = epoch
    while i <= cutoff:
        yield i
        month = i.month % 12 + 1
        year = i.year if i.month < 12 else i.year + 1
        i = datetime.strptime('%d-%d-01' % (year, month), '%Y-%m-%d')


def get_earliest(dates):
    earliest = dates[0]
    for date in dates:
        date_time = datetime.strptime(date, '%Y-%m-%d')
        earliest_time = datetime.strptime(earliest, '%Y-%m-%d')
        try:
            assert date_time > earliest_time
        except AssertionError:
            earliest = date
    return earliest


def exists_and_not_empty(filename):
    try:
        return os.path.getsize(filename) > 0
    except (AssertionError, OSError):
        return False


def compile_config(config_list):
    vals = []
    for c in config_list:
        vals.append('--' + c['name'])
        vals.append(c['value'])
    return vals


def run():
    # get last date to query (last whole month) and the first (earliest)
    now = datetime.now()
    last_month = now.month - 1 if now.month > 1 else 12
    year = now.year if last_month < 12 else now.year - 1
    cutoff_date = "%s-%s-%s" % (year, last_month, "01")
    earliest_date = get_earliest([m['startDate'] for m in MODES])

    # cache Open Edition reports
    for day in generate_dates(earliest_date, cutoff_date):
        date = day.strftime('%Y-%m-%d')
        month = day.strftime('%Y%m')
        cache_file = get_filename(CACHEDIR, date)
        try:
            assert not exists_and_not_empty(cache_file)
        except AssertionError:
            continue
        cmd = ['./retrieve_oe_stats',
               '--token', OE_API_TOKEN,
               '--publisher', OE_API_PUBLISHER,
               '--month', month]
        subprocess.call(cmd, stdout=outstream(cache_file))

    # normalise reports
    for day in generate_dates(earliest_date, cutoff_date):
        date = day.strftime('%Y-%m-%d')
        out_file = get_filename(OUTDIR, date)

        # continue if output file already exists
        if exists_and_not_empty(out_file) and not REPROCESS_REPORTS:
            continue

        cache_file = get_filename(CACHEDIR, date)
        # at this point all *relevant* cache files must exists
        if not exists_and_not_empty(cache_file):
            continue

        i = 0
        output_stream = outstream(out_file)
        for m in MODES:
            input_stream = instream(cache_file)
            headers = i == 0  # only include headers in first iteration
            i += 1
            add_headers = ['--add-headers'] if headers else []
            config = compile_config(m['config']) if 'config' in m else []
            cmd = ['./resolve_reports',
                   '--regex', m['regex'][0],
                   '--measure', m['measure']] + add_headers + config
            subprocess.call(cmd, stdout=output_stream, stdin=input_stream)


if __name__ == '__main__':
    run()
